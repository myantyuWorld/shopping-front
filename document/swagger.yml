openapi: 3.0.3
info:
  title: exercise-support-front
  description: |
    A案件を経験し、Vue, Golangの様々な知見を得たのでOUTPUTするための個人開発を行う<br/>
    openapiを介してバックエンド、フロントエンド間のコミュニケーションをスムーズにしたいため、openapi-typescriptを使用してフロント側の<br/>
    パス、リクエスト、レスポンスの方を自動生成する<br/>
    自動生成の元ネタなので積極的にopenapiをメンテナンスしてください
    フロント用に自動生成しやすい書き方は[こちら](https://openapi-ts.pages.dev/advanced#styleguide)
  version: 1.0.0
tags:
  - name: account
    description: アカウント情報
  - name: category
    description: カテゴリ情報
  - name: todo
    description: Todo情報
  - name: shopping
    description: 買い物情報
paths:
  /me:
    get:
      tags:
        - account
      summary: 自分情報取得API
      description: |
        **自分情報取得API**<br/>
        <br/>
        <br/>
      responses:
        200:
          $ref: "#/components/responses/GetMe"
        
  /signup:
    post:
      tags:
        - account
      summary: サインアップAPI
      description: |
        **サインアップAPI**</br>
        <br/>
        <br/>
        - Eメールアドレス
        - ユーザー名
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUp'
      responses:
        '200':
          description: OK
        '401':
          description: Authorization information is missing or invalid.
        '5XX':
          description: Unexpected error.
  /normal/login:
    post:
      tags:
        - account
      summary: ログインAPI
      description: |
        **Emailアドレスを使用して、CognitoにサインインするためのAPI**</br>
        <br/>
        <br/>
        本システムは、LINEログインを行うことが可能。<br/>
        LINEログインを使用しないユーザー向けの認証API
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignIn"
      responses:
        '200':
          description: OK
        '401':
          description: Authorization information is missing or invalid.
        '5XX':
          description: Unexpected error.
  /line/login:
    post:
      tags:
        - account
      summary: LINE認証リダイレクトAPI
      description: |
        **LINE認証を行うためのURLにリダイレクトさせるAPI**</br>
        <br/>
        LINEログインを行うためには、以下のURLにクライアントを誘導させる必要がある。</br>
        その際、`https://access.line.me/oauth2/v2.1/authorize`にリダイレクトさせる必要があるが、</br>
        他にもLINEのClientID等が必要になる。</br>
        これらをフロントエンド側に持たせるのでなく、バックエンド側でラップすることで情報を集約させる目的で本APIでラップするもの。</br>
        </br>
        </br>
        **FYI. [Go言語]LINE ログイン連携方法**
        - https://qiita.com/KWS_0901/items/8c4accdda43bc9f26a57
      responses:
        '200':
          description: リダイレクトURLを返す
  /line/callback:
    get:
      tags:
        - account
      summary: LINEコールバックAPI
      description: |
        **LINE認証コールバックAPI**<br/>
        LINE認可エンドポイントにアクセスし、ログイン情報を入力後、認可コードを受けるためのコールバックAPIである。<br/>
        認可コードと、LINEクライアントシークレットを用いてOAuth2認証を行い、AccessTokenを取得する。
        AccessTokenをCookieにセットし、ログイン後の画面に
        Cognitoから送られてくるアクセストークンをCookieにセットし、ログイン後の画面にリダイレクトを行う
        </br>
        </br>
        **FYI. [Go言語]LINE ログイン連携方法**
        - https://qiita.com/KWS_0901/items/8c4accdda43bc9f26a57
      parameters:
        - in: query
          name : code
          schema:
            type: string
          required: true
        - in: query
          name : state
          schema:
            type: string
            description: CSRFトークン
          required: true
      responses:
        '200':
          description: |
            アクセストークン
        '401':
          description: Authorization information is missing or invalid.
        '5XX':
          description: Unexpected error.
  /categories:
    get:
      tags:
        - category
      summary: カテゴリ一覧API
      description: |
        カテゴリをデフォルトで全件取得して返却します <br>
        idの昇順。
      responses:
        200:
          $ref: '#/components/responses/GetCategories'
    post:
      tags:
        - category
      summary: カテゴリ登録API
      description: |
        カテゴリを登録します!
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: OK
        '401':
          description: Authorization information is missing or invalid.
  /categories/{categoryId}:
    put:
      tags:
        - category
      summary: カテゴリ更新API
      description: |
        カテゴリを更新します
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: OK
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Not Found
    delete:
      tags:
        - category
      summary: カテゴリ削除API
      description: |
        カテゴリを削除します
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Not Found
  /todo:
    get:
      tags:
        - todo
      summary: TODO取得API
      description: |
        TODO一覧を取得して返却します<br/>
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: status
          schema:
            type: string
            enum:
              - DONE
              - TODO
      responses:
        200:
          $ref: '#/components/responses/GetTodoList'
        '401':
          description: Authorization information is missing or invalid.
    post:
      tags:
        - todo
      summary: TODO登録API
      description: |
        TODOを登録します<br/>
        デフォルトで、`done(タスク状態)`をfalseにします
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                categoryId:
                  type: integer
                dueDate:
                  type: string
                  format: date
      responses:
        '200':
          description: OK
        '401':
          description: Authorization information is missing or invalid.
  /todo/{todoId}:
    get:
      tags:
        - todo
      summary: TODO詳細API
      description: |
        TODOを１つ取得します
      parameters:
        - in: path
          name: todoId
          schema:
            type: integer
          required: true
      responses:
        200:
          $ref: '#/components/responses/GetTodo'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Not Found
        '5XX':
          description: Unexpected error.
    put:
      tags:
        - todo
      summary: TODO更新API
      description: |
        TODOの情報を更新します<br/>
        更新できる情報として以下があります<br/>
        - カテゴリ
        - TODOの名称
        - 期限
      parameters:
        - in: path
          name: todoId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                categoryId:
                  type: integer
                dueDate:
                  type: string
                  format: date
      responses:
        '200':
          description: OK
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Not Found
    delete:
      tags:
        - todo
      summary: TODO論理削除API
      description: |
        TODOを論理削除（doneの値を切り替える）します
      parameters:
        - in: path
          name: todoId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Not Found
        '5XX':
          description: Unexpected error.
  /shopping/item/{owner_id}:
    get:
      tags:
        - shopping
      summary: 買い物リスト取得API
      description: |
        `owner_id`で指定した買い物リストを取得します<br/>
        <br/>
        買い物アイテムのIDの昇順で返され、`picked` = `true`になっているレコードについては、<br/>
        返却対象外
      parameters:
        - in: path
          name : owner_id
          description: オーナーID(所属している家庭単位のID)
          schema:
            type : integer
          required: true
      responses:
        '200':
          $ref: '#/components/responses/GetShoppingItemList'
        '401':
          description: Authorization information is missing or invalid.
    post:
      tags:
        - shopping
      summary: 買い物登録API
      description: |
        買い物メモを登録します<br/>
      parameters:
        - in: path
          name : owner_id
          description: オーナーID(所属している家庭単位のID)
          schema:
            type : integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  description: |
                    food または、 necessity
                  example: food
                description:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  category:
                    type: string
                    enum:
                      - food
                      - necessity
                  description:
                    type: string
        '401':
          description: Authorization information is missing or invalid.
    delete:
      tags:
        - shopping
      summary: 買い物削除API
      description: |
        買い物メモを削除します<br/>
      parameters:
        - in: path
          name : owner_id
          description: オーナーID(所属している家庭単位のID)
          schema:
            type : integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: |
                    買い物メモのID
      responses:
        '200':
          description: OK
        '401':
          description: Authorization information is missing or invalid.
components:
  schemas:
    Me:
      type: object
      properties:
        id:
          type: integer
        user_name:
          type: string
        email:
          type: string
          format: email
        authority:
          type: string
          enum:
            - COMMON
            - ADMIN
    SignUp:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        username:
          type: string
    SignIn:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string # カテゴリ管理機能を使用してカテゴリ自体をメンテするため、Enum定義はしない
    Todo:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          minLength: 10
          maxLength: 255
          nullable: false
        category:
          $ref: '#/components/schemas/Category'
        dueDate:
          type: string
          format: date
          nullable: false
          example: "1990-01-01"
        done:
          type: boolean
    GetShoppingItem:
      type: object
      properties:
        id:
          type: integer
          nullable: false
        owner_id:
          type: integer
          nullable: false
        name:
          type: string
          minLength: 10
          maxLength: 255
          nullable: false
        category:
          type: string
          example: food
          nullable: false
        picked:
          type: boolean
          nullable: false
      required:
        - id
        - owner_id
        - name
        - category
        - picked
    UserBase:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        birthday:
          type: string
          format: date
          example: "1909-01-01"
          nullable: true
        age:
          type: integer
          nullable: true
        sex:
          type: string
          enum:
            - MALE
            - FEMALE
        memberType:
          $ref: '#/components/schemas/MemberType'
      required:
        - id
        - name
        - address
        - birthday
        - age
        - sex
        - memberType
    User:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            phoneNumber:
              type: string
              example: '09012345678'
            email:
              type: string
              example: 'sample@example.com'
              nullable: true
          required:
            - phoneNumber
            - email
    MemberType:
      type: string
      nullable: true
      enum:
        - GENERAL
        - SPECIAL
        - CHILD
        - SENIOR
    Trigger:
      type: string
      enum:
        - HP
        - INTRODUCTION
        - TVCM
        - HOTPEPPER
        - FLYER
        - NONE
    GeneralError:
      type: object
      properties:
        code:
          type: string
          format: int
          example: "エラーカテゴリ/エラータイプ"
  parameters:
    UserId:
      name: userId
      in: path
      description: ユーザーID
      required: true
      schema:
        type: string
        example: 248c8027-b752-db4c-76c1-fb22a05e9591
        nullable: false
  examples:
    GetUsersCommon:
      value:
      - id: 248c8027-b752-db4c-76c1-fb22a05e9591
        name: 田中太郎
        address: 東京都中央区新富1-16-4
        birthday: "1990-01-01"
        age: 33
        sex: MALE
        memberType: GENERAL
      - id: a980e372-1eb2-0e1a-f23b-9208e226e954
        name: 山田花子
        address: 埼玉県さいたま市大宮区桜木町1-7-5
        birthday: "1988-10-15"
        age: 34
        sex: FEMALE
        memberType: SENIOR
      - id: a9bbaab7-f596-712f-b4cf-c72a4323dff2
        name: 山本次郎
        address: 神奈川県横浜市中区横浜公園
        birthday: null
        age: null
        sex: MALE
        memberType: null
    GetUserCommon:
      value:
        id: 248c8027-b752-db4c-76c1-fb22a05e9591
        name: 田中太郎
        address: 東京都中央区新富1-16-4
        birthday: "1990-01-01"
        age: 33
        sex: MALE
        phoneNumber: "09012345678"
        email: taro@example.com
    GetUserIncludeNullFields:
      value:
        id: a9bbaab7-f596-712f-b4cf-c72a4323dff2
        name: 山本次郎
        address: 神奈川県横浜市中区横浜公園
        birthday: null
        age: null
        sex: MALE
        phoneNumber: null
        email: taro@example.com
  responses:
    GetMe:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Me"
    GetTodoList:
      description: successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Todo'
    GetShoppingItemList:
      description: successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GetShoppingItem'
    GetShoppingItem:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetShoppingItem'
    GetTodo:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Todo'
    GetCategories:
      description: successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Category'
    GetUsers:
      description: successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserBase'
          examples:
            GetUsersCommon:
              $ref: '#/components/examples/GetUsersCommon'
    GetUser:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            GetUserCommon:
              $ref: '#/components/examples/GetUserCommon'
            GetUserIncludeNullFields:
              $ref: '#/components/examples/GetUserIncludeNullFields'
    NotFound:
      description: Not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
    IllegalInput:
      description: Illegal input for operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
